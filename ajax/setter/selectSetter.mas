<%args>
$tableName
$data
$cssClass => ''
$disabled => undef
</%args>
<%init>
use EBox::Gettext;
use Perl6::Junction qw(any);
use EBox::Types::Select;

my $id = $tableName . '_' . $data->fieldName();
#########################
# EVIL HACK
#########################
# This is done here, since it makes a deep recursion error on Select
# type class at options method. This is due to rows implementation
# which always ask for printableValues and it is not possible to ask
# for value rows. This does not work when the edit/add will be
# generated by JavaScript.
#
# We are very ashamed about this evil hack, we want to apologise for
# that. Time constraints make us do this crap. Sorry.

my $options = $data->options();
my $empty;
my @filteredOptions;
my @optionsAlreadyModel = ();

my $value  = $data->value();
if ($data->unique()) {
    my $valueFound = 0;
    # Filter the options in other just to show the ones allowed
    my $model = $data->model();

    if ( defined ( $model )) {
        my $field  = $data->fieldName();

        foreach my $id (@{$model->ids()}) {
            # Check if the element exists to avoid nasty issues
            # with union types
	    my $row = $model->row($id);
            next unless ($row->elementByName($field));
            push( @optionsAlreadyModel,
                  $row->valueByName($field) );
        }

        # Difference among optionsAlreadyModel and options arrays
        @filteredOptions = grep { ! ($_->{value} eq any(@optionsAlreadyModel)) } @{$options};

        # Add the current value if the action is an edition
        if ( $data->isValueSet() ) {
            $valueFound = 1;
            push ( @filteredOptions, {
                                      value => $data->value(),
                                      printableValue => $data->printableValue(),
                                     }
               );
            @filteredOptions = sort { $a->{value} cmp $b->{value} } ( @filteredOptions );
        } else {
            foreach my $opt (@filteredOptions) {
                if ($opt->{value} eq $value) {
                    $valueFound = 1;
                    last;
                }
            }
        }

        $options = \@filteredOptions;
        $empty = (@filteredOptions == 0);
        if (not $valueFound and not $empty) {
            $value = $options->[0]->{value};
        }
    }
} else {
    $empty = @{ $options } == 0;
}

my @extraParams;
my $addNewJS;
my $addNewModalValue = EBox::Types::Select::ADD_NEW_MODAL_VALUE;
my $foreignModel = $data->foreignModel();
if ($foreignModel and $data->foreignNextPageField())  {

   my $alreadyAdded = grep {$_->{value} eq $addNewModalValue } @{ $options  };
   if (not $alreadyAdded) {
       unshift @{ $options }, (
           {
               printableValue => __('Add new...'),
               value => $addNewModalValue,
           },
           {
               printableValue => '<hr/>',
               disabled => 1,
               value => 'separator',
           },
          );
   }

   my $nextPageField = $data->foreignNextPageField();

   my ($nextPageType) = grep {
       $_->fieldName() eq $nextPageField
   } @{ $foreignModel->table()->{tableDescription} };
   my $modelManager = EBox::Model::Manager->instance();
   my $nextPageModel = $modelManager->model($nextPageType->foreignModel());
   my $nextPageModelContextName = $nextPageModel->contextName();
   $addNewJS = $foreignModel->modalChangeViewJS(
       changeType => "changeAdd",
       editId => "undefined",
       selectCallerId => $id,
       selectForeignField => $data->foreignField(),
       nextPageContextName => $nextPageModelContextName,
       foreignNextPageField => $nextPageField,
       firstShow => 1,
     );

    my $onChangeJS = << "ENDJS";
    if (this.options[this.selectedIndex].value == '$addNewModalValue') {
          $addNewJS
    } ; return false;
ENDJS

    push @extraParams, onChange => $onChangeJS;
    if ($empty) {
        push @extraParams, style => 'display:none';
    }
}
unless ($data->editable()) {
    $disabled = 'disabled';
}
</%init>

<& /input/select.mas,
   'name'    => "$id" ,
   'value'   => $value,
   'options' => $options,
   'id'      => "$id",
   'class'   => "$cssClass",
   'disabled' => $disabled,
   @extraParams
&>

% if ($addNewJS and $empty) {
<div id="<% $id %>_empty">
<% __('No elements found. ') %>
<a href="#" class="addNew" name="add" onclick="<% $addNewJS %>;return false"><% __('Add a new one') %></a>
<p>
</div>
% }
<% $data->trailingText() %>
