<%flags>
  inherit => '/ajax/tableBody.mas'
</%flags>
<%args>
  $model
  $action => 'view'
  $editid => ''
  $hasChanged => 1
  $filter => ''
  $page => 0
  $tpages => 0
  %presetParams => ()
  $hideTable => 1
  $selectCallerId => undef
  $selectForeignField => undef
  $nextPageContextName => undef
  $foreignNextPageField    => undef
</%args>
<%init>
use EBox::Gettext;
use EBox::Model::DataTable;
use POSIX;
</%init>

<& SELF:view,
   model      => $model,
   hasChanged => $hasChanged,
   action     => $action,
   selectCallerId => $selectCallerId,
   selectForeignField => $selectForeignField,
  nextPageContextName => $nextPageContextName,
  foreignNextPageField    => $foreignNextPageField,
&>


<%method view>
<%args>
  $model
</%args>
<& SELF:header,
   model => $model
&>
% if ( $model->precondition() ) {
<div id="<% $model->modelName() %>_modal">
  <& SELF:body,
     model      => $model
  &>
</div>
% }
% else
% {
%   my $failMsg =  $model->preconditionFailMsg();
%   if ($failMsg) {
<div class="note">
  <% $failMsg %>
</div>
%   }
% }
</%method>

<%method header>
<%args>
  $model
</%args>
<& SELF:headerScriptSection &>
<!-- Element to hide the elements while Asynchronous request are -->
<!-- working. Find more information at "table-helper.js"  -->
<div id="<% 'hiddenDiv_' . $model->name() | h %>_modal" class="hidden"></div>

<div id='error_<% $model->modelName() | hu %>_modal'></div>
</%method>


<%doc>
  Method: _body

     Set the model viewer body. Check the overridden method very
     carefully.

  Overrides:

     /ajax/modelViewer.mas:_body

</%doc>
<%method _body>
<%args>
  $model
  $action => 'view'
  $editid => ''
  $hasChanged => 1
  $filter => ''
  $page => 0
  $tpages => 0
  %presetParams => ()
</%args>
<%init>

  use EBox::Gettext;

  # Fetch table head from model
  my @tableHead = @{$model->table()->{'tableDescription'}};
  # Pointer to different values for convenience
  my $actions = $model->table()->{'actions'};
  my $changeView = $model->action('changeView');
  my $printableRowName = $model->table()->{'printableRowName'};
  my $tableName = $model->table()->{'tableName'} . '_modal';
  my $printableTableName = $model->table()->{'printableTableName'};

  # Fetch the edited row if we are editing one
  my $rowEdit;
  if ($editid and ($editid ne 'undefined')) {
          $rowEdit = $model->row($editid);
  }

  # Fetch the data to be displayed in setters, if we are editing a row
  # we should show the contents of the current fields. If we are
  # adding a new row, the fields are empty except for a preset values
  # adding where preset contents must be shown
  my @formData = @tableHead;
  if ($rowEdit) {
      @formData = @{$rowEdit->elements()};
  } elsif ( ((keys %presetParams) > 0)
            and $action eq 'presetUpdate') {
      # The preset is not empty
      @formData = values(%presetParams);
  }
  # If the action is a preset update, choose for an edition or an
  # addition whether the editid is set or not
  if ( $action eq 'presetUpdate' ) {
      $action = 'changeAdd' if (not $editid);
      $action = 'changeEdit' if ( $editid );
  }
</%init>

<div id="<% 'hiddenDiv_' . $model->name() | h %>_modal" class="hidden"></div>
<div id='error_<% $model->modelName() | hu %>_modal'></div>
<div id="<% $model->modelName() %>_modal"> 
% if ( $model->pageTitle() ) {
%      my $viewCustomizer = $model->viewCustomizer();
%      my $msg = $viewCustomizer ? $viewCustomizer->permanentMessage() : undef;
%      if ($msg) {
<& /msg.mas,
   msg => $msg
&>
%      }
%      if ( $model->message() ) {
<& /msg.mas,
   msg => $model->popMessage(),
   class => $model->messageClass()
&>
%      }
% }



% if ($model->help()) {
<div class="help">
  <% $model->help() %>
</div>
% }

%  if ( $action ne 'changeAdd' and $action ne 'changeEdit' )
%  {
%    if ( $model->printableModelName() )
%    {
<& PARENT:title,
   title => $model->headTitle()
&>
%    }
%    if ($changeView and exists $actions->{'add'})
%    {
  <a href='#' class='addNew'
      name='add'
         onClick="<%
                 $model->changeViewJS( changeType => "changeAdd",
                      editId => "undefined",
                      page => $page,
                      isFilter => 0)
                %>;return false"><% __('Add new') %></a>
   <br/>
   <br/>
%    }
  <span id="<% 'creatingForm_' . $tableName %>"></span>
%  }

%  if ( $action eq 'changeAdd' or $action eq 'changeEdit' )
%  {
%   if ( $action eq 'changeAdd' )
%    {
%     my $addingStr = __x('Adding a new {row}', row => $printableRowName);
<& PARENT:title, title => $addingStr &>
%    }
%   elsif ( $action eq 'changeEdit' )
%    {
<h3>
%     my $editingStr = __x('Editing {row}', row => $printableRowName);
<& PARENT:title, title => $editingStr &>
%   }

<form name="<% $tableName . '_modalform' %>">
  <table class='formTable'>
    <tbody>
     <col width="1*" />
     <col width="auto" />
      <& PARENT:editRowFields,
         modelName => $tableName,
         formData => \@formData
      &>
      <& SELF:buttons &>
    </tbody>
  </table>
</form>

%   my $customizer = $formData[0]->model()->viewCustomizer();
%   if ($customizer) {
<script>
<%   $customizer->onChangeActionsJS() %>
</script>
%    }
%  }

</div>
% # End body method
</%method>


<%doc>
   Method: buttons

     Show the button to submit the form

  Overrides:

     /ajax/modelViewer.mas:buttons

</%doc>
<%method buttons>
<%init>
  # Getting the arguments from the first request
  my $requestArgs = $m->request_args();
  my $model  = $requestArgs->{model};
  my $action = $requestArgs->{action};
  my $editid = $requestArgs->{editid};
  my $filter = $requestArgs->{filter};
  my $page   = $requestArgs->{page};
  my $tpages = $requestArgs->{tpages};
  my $selectCallerId = $requestArgs->{selectCallerId};
  my $selectForeignField = $requestArgs->{selectForeignField};
  my $nextPageContextName  = $requestArgs->{nextPageContextName}; 
  my $foreignNextPageField  = $requestArgs->{foreignNextPageField}; 
  my $changeView = $model->action('changeView');

  if ( $action eq 'presetUpdate' ) {
      $action = 'changeAdd' if ( not $editid );
      $action = 'changeEdit' if ( $editid );
  }
</%init>
<tr>
  <td id="applyChanges">
  </td>
  <td id="<% 'buttons_' . $model->modelName() . '_modal' %>">
% if ( $action eq 'changeAdd' ) {
<%perl>
my $addOnClick;
if ($foreignNextPageField) {
    $addOnClick = $model->modalAddNewRowJS($page, $foreignNextPageField, 
                                           selectCallerId => $selectCallerId,
                                           selectForeignField => $selectForeignField,
                                           nextPageContextName =>  $nextPageContextName,
                                                 );
    $addOnClick .= ';';
} else {
    $addOnClick .=   'Modalbox.hide();' ;
}
$addOnClick .=  'return false';
</%perl>
    <& /input/submit.mas,
        class => 'inputButton',
        type => 'submit',
        name => 'add',
        value => __('Add'),
        title => 'Add',
        onclick => $addOnClick,
    &>
% } elsif ($action eq 'changeEdit')  {
<%perl>
 my $editOnClick =  $model->changeRowJS($editid, $page) . ';' .
                   'Modalbox.hide();' .
                   'return false';
</%perl>
    <& /ajax/customActions.mas, model => $model, id => $editid &>
    <& /input/submit.mas,
        class => 'inputButton',
        type => 'submit',
        name => 'change',
        value => __('Change'),
        title => 'Change',
       onclick => $editOnClick
    &>
% }
% if ($changeView) {
    <& /input/submit.mas,
        class => 'inputButton',
        type => 'submit',
        name => 'cancel',
        value => __('Cancel'),
        title => 'Cancel',
        onclick  => 'Modalbox.hide(); return false'
    &>
% }
  </td>
</tr>



</%method>
