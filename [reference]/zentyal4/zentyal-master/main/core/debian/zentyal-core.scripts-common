PORT=8443

stop_ebox_processes() {
    stop ebox.redis 2>/dev/null || true
    stop zentyal.webadmin-nginx || true
    pkill -9 -u ebox || true
}

# This function uses the Zentyal API to fetch the configured webadmin port used
# by Zentyal
#
# Usage: port=$(fetch_ebox_port)
fetch_ebox_port()
{
    set +e

    ret=$(perl -e '
            use EBox;
            use EBox::Global;
            EBox::init();

            my $webadmin = EBox::Global->modInstance('webadmin');
            print $webadmin->listeningPort();
            exit 0;
            ' 2> /dev/null );

    if [ $? -eq 0 ]; then
        PORT=$ret;
    fi

    set -e
}

# This function is used to try guess if a given port is available. It tries
# to connect to the port. Note that it does not distinguish if the port
# is being already used by Zentyal.
#
# Usage: check_port_available port_number
check_port_available()
{
    check_port=$1

    set +e

    perl -e '
        use IO::Socket;
        my $port = $ARGV[0];
        IO::Socket::INET->new(
            PeerAddr => "127.0.0.1",
            PeerPort => $port,
            Proto    => "tcp",
            Timeout  => 5) or exit 0;
        exit 1;
        ' $check_port 2> /dev/null;
    ret=$?

    set -e
    return $ret;
}

# This function uses the Zentyal API to set the webadmin port to be used by
# Zentyal.
#
# In case the current port and the new port are the same it returns without
# modifying the current value.
#
# We have to do two things to set the port:
#
#   Tell webadmin module its new port
#   Save changes in webadmin and services
#
# Usage: set_ebox_port new_port
set_ebox_port()
{
    db_get zentyal-core/port
    new_port=$RET

    fetch_ebox_port;
    if [ $new_port -eq $PORT ]; then
        return 0;
    fi

    set +e

# FIXME: do this without haproxy (like in 3.2)
#    ret=$(perl -e '
#            use EBox;
#            use EBox::Global;
#
#            EBox::init();
#            my $port = $ARGV[0];
#            my $global = EBox::Global->getInstance();
#            my @args = ();
#            push (@args, modName        => 'webadmin');
#            push (@args, sslPort        => $port);
#            push (@args, enableSSLPort  => 1);
#            push (@args, defaultSSLPort => 1);
#            push (@args, force          => 1);
#            $haproxy->setHAProxyServicePorts(@args);
#            $haproxy->saveConfig();
#            if ($global->modExists('services')) {
#                $global->modInstance('services')->saveConfig();
#            }
#            ' $new_port);
#
#    set -e
}
