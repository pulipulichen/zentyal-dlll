<& SELF:_exec, @_ &>

<%method _exec>
<%args>
$action
$model
$editid
$filter
$page
$tpages
%presetParams  => ()
@customizerParams => ()
$printableRowName => ''
</%args>
<%init>
  use EBox::Gettext;

  my $tableName = $model->table()->{'tableName'};
  my @tableHead = @{$model->table()->{'tableDescription'}};
  # Fetch the data to be displayed in setters, if we are editing a row
  # we should show the contents of the current fields. If we are
  # adding a new row, the fields are empty except for a preset values
  # adding where preset contents must be shown
  my @formData;
  my @extraComponents;
  my $editRow; # must be outside of if scope to not lose the element weaken reference
  if ($editid and ($editid ne 'undefined')) {
      $editRow = $model->row($editid);
      @formData = @{$editRow->elements()};
      if ($action eq 'changeClone') {
          # unique fields should not be cloned
          my @uniqFields = grep { $_->unique()  } @tableHead;
          foreach my $uniqField (@uniqFields) {
              foreach my $clonedField (@formData) {
                  if ($uniqField->fieldName() eq $clonedField->fieldName()) {
                      $clonedField = $uniqField;
                      last;
                  }
              }
          }
      }
  } elsif ( ((keys %presetParams) > 0)
            and $action eq 'presetUpdate') {
      # The preset is not empty
      @formData = values(%presetParams);
  } else {
      @formData = @tableHead;
  }

  if ( $action eq 'presetUpdate' ) {
      $action = 'changeAdd' if ( not $editid );
      $action = 'changeEdit' if ( $editid );
  }
</%init>
<& SELF:title, action => $action, printableRowName => $printableRowName &>
<& SELF:editForm,
    model     => $model,
    action    => $action,
    editid    => $editid,
    filter    => $filter,
    page      => $page,
    tpages    => $tpages,
    formData  => \@formData,
    sections  => $model->sections(),
&>

%    my $customizer = $formData[0]->model()->viewCustomizer(@customizerParams);
%    if ($customizer) {
<script>
<%   $customizer->onChangeActionsJS() %>
</script>
%     }
</%method>

<%method title>
<%args>
$action
$printableRowName
</%args>
<%init>
    my $formTitle;
    if ( $action eq 'changeAdd' )  {
       $formTitle = __x('Adding a new {row}', row => $printableRowName);
    } elsif ( $action eq 'changeEdit' )  {
       $formTitle = __x('Editing {row}', row => $printableRowName);
    } elsif ($action eq 'changeClone') {
       $formTitle = __x('Cloning {row}', row => $printableRowName);
    } else {
       $m->abort("Unknown changerowFrom action: $action");
    }
</%init>
<h4><% $formTitle %></h4>
</%method>

<%doc>
  Method: editForm

    Show the form to edit the fields from a row

  Parameters:

    modelName - String the model name
    formData - array containing <EBox::Types::Abstract> which form the
    table row

</%doc>
<%method editForm>
<%args>
  $model
  @formData
  @sections => ()
  $action => undef
  $editid => undef
  $filter => undef
  $page   => undef
  $tpages => undef
</%args>
<%init>
my $modelName = $model->name();
my $formAttrs = '';
if (@formData and $formData[0]->model()->disableAutocomplete()) {
  $formAttrs = 'autocomplete="off"';
}
</%init>
<form class="formDiv changeRow" id="<% $modelName . '_ajaxform' %>" name="<% $modelName . '_ajaxform' %>" <% $formAttrs %>>
      <& SELF:editFormSection,
         name => $modelName,
         formData => \@formData,
      &>
% foreach my $section (@sections) {
      <& SELF:editFormSection,
         name => $modelName,
         formData => \@formData,
         section => $section
      &>
% }
      <div class="form-buttons">
        <span id="applyChanges"> </span>
        <& SELF:buttons,
           model  => $model,
           action => $action,
           editid => $editid,
           filter => $filter,
           page   => $page,
           tpages => $tpages,
        &>
      </div>
</form>
% if (@formData) {
%   my $customizer = $formData[0]->model()->viewCustomizer();
%   if ($customizer) {
<script>
<%   $customizer->onChangeActionsJS() %>
</script>
%    }
% }
</%method>


<%doc>
  Method: editFormSection

    Show a section of an edit form

  Parameters:

    name - String with the name
    formData - array containing <EBox::Types::Abstract> which form the
    table row

</%doc>
<%method editFormSection>
<%args>
  $name
  @formData
  $section => undef
</%args>
<%init>
  my @data;
  my $title;
  if ($section) {
    @data = grep {  $_->section() and ($_->section() eq $section->{'name'}) }
        @formData;
  } else {
    @data = grep { not $_->section() } @formData;
  }
</%init>
% if ($section) {
%     my $sectionId = 'form_section_' . $section->{'name'};
      <a id="<% $sectionId %>_toggler" href="#" onclick="toggleWithToggler('<% $sectionId %>'); return false;" class="maxBox"><span class="hidden">Toggle</span></a>
        <h3 style="display: inline;">
          <% $section->{'title'} %>
        </h3>
      <fieldset id="<% $sectionId %>" style="display: none;">
% }
      <& SELF:editRowFields,
         modelName => $name,
         formData => \@data
      &>
% if ($section) {
      </fieldset>
% }
</%method>



<%doc>
  Method: editRowFields

    Show the form to edit the fields from a row

  Parameters:

    modelName - String the model name
    formData - array containing <EBox::Types::Abstract> which form the
    table row

</%doc>
<%method editRowFields>
<%args>
  $modelName
  @formData
</%args>
% foreach my $type (grep { defined($_->HTMLSetter())} @formData) {
<%perl>
    my $viewCustomizer = $type->model()->viewCustomizer();
    my $rowInit;
    my $disableSetter = 0;
    my $displayRow;
    if ($viewCustomizer) {
        $rowInit = $viewCustomizer->initHTMLStateField($type->fieldName(), \@formData);
        if ($rowInit eq 'hide') {
            $displayRow = 'class="hidden"';
        } elsif ($rowInit eq 'disable') {
            $disableSetter = 1;
        }
    }
</%perl>

<& $type->typeRowLayout(),
    'modelName' => $modelName,
    'type' => $type,
    'displayRow' => $displayRow,
    'disableSetter' => $disableSetter,
&>
% }

</%method>

<%doc>
   Method: buttons

     Show the button to submit the form

  Overrides:

     /ajax/modelViewer.mas:buttons

</%doc>
<%method buttons>
<%args>
$model
$action
$editid
$filter
$page
$tpages
</%args>
<%init>
  my $modelName  = $model->modelName();
  my $changeView = $model->action('changeView');
  my $onlyCustomActions = $model->table()->{'onlyCustomActions'};
  my $withoutActions = $model->table()->{'withoutActions'};
  my $cloneId;

  if ( $action eq 'presetUpdate' ) {
      $action = 'changeAdd' if ( not $editid );
      $action = 'changeEdit' if ( $editid );
  } elsif ($action eq 'changeClone') {
      $action = 'changeAdd';
      $cloneId = $editid;
  }

my $cancelJS =  "Zentyal.TableHelper.cleanMessage('$modelName'); Zentyal.TableHelper.restoreTop('$modelName'); return false";
if ($action eq 'changeEdit') {
    $cancelJS = "Zentyal.TableHelper.highlightRow('$editid', false);" . $cancelJS;
}
</%init>
% unless ((defined $withoutActions) and $withoutActions) {
  <span id="applyChanges">
  </span>
  <div id="<% $modelName %>_buttons">
% unless ((defined $onlyCustomActions) and $onlyCustomActions) {
%  if ( $action eq 'changeAdd' ) {
%    # extra input for cloneId
%    if ($cloneId)  {
        <&/input/hidden.mas,
              name => $modelName . '_cloneId',
              id => $modelName . '_cloneId',
              value => $cloneId
         &>
%    }
    <& /input/submit.mas,
        class => 'btn btn-icon btn-add',
        type => 'submit',
        name => 'add',
        value => __('Add'),
        title => 'Add',
        onclick => $model->addNewRowJS($page, cloneId => $cloneId) . '; return false'
    &>
%  } elsif ($action eq 'changeEdit') {
    <& /input/submit.mas,
        class => '',
        type => 'submit',
        name => 'change',
        value => $model->printableActionName(),
        title => 'Change',
        onclick => $model->changeRowJS($editid, $page) . '; return false'
    &>
%  }
%  if ($changeView) {
    <& /input/submit.mas,
        class => '',
        type => 'submit',
        name => 'cancel',
        value => __('Cancel'),
        title => 'Cancel',
        onclick => $cancelJS
    &>
%  }
% }
  </div>
% }
</%method>

