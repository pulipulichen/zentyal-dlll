<%args>
$spamThreshold

$bayes

$bayesAutolearn
$bayesAutolearnSpamThreshold
$bayesAutolearnHamThreshold

@whitelist
@blacklist

$spamSubject => undef

@trustedNetworks
@okLocales      => ('all')

$password
</%args>
# This is the right place to customize your installation of SpamAssassin.
#
# See 'perldoc Mail::SpamAssassin::Conf' for details of what can be
# tweaked.
#
# Only a small subset of options are listed below
#
###########################################################################

#   Add *****SPAM***** to the Subject header of spam e-mails
#
# rewrite_header Subject *****SPAM*****
% if ($spamSubject) {
rewrite_header  subject  <% $spamSubject %>
% }

#   Save spam messages as a message/rfc822 MIME attachment instead of
#   modifying the original message (0: off, 2: use text/plain instead)
#
# report_safe 1


#   Set which networks or hosts are considered 'trusted' by your mail
#   server (i.e. not spammers)
#
% if (@trustedNetworks) {
trusted_networks <% "@trustedNetworks" %>
% }

#   Set file-locking method (flock is not safe over NFS, but is faster)
#
# lock_method flock


#   Set the threshold at which a message is considered spam (default: 5.0)
#   In Amavis case this value is overriden by amavis' tag levels
#
required_score <% $spamThreshold %>


#   Use Bayesian classifier (default: 1)
#
# use_bayes 1

<& .bool, 'use_bayes', $bayes &>
bayes_store_module      Mail::SpamAssassin::BayesStore::MySQL
bayes_sql_dsn           DBI:mysql:spamassassin:localhost:3306
bayes_sql_username      amavis
bayes_sql_password      <% $password %>
bayes_sql_override_username      amavis

#   Bayesian classifier auto-learning (default: 1)
#
# bayes_auto_learn 1

<& .autolearn,
            active => $bayesAutolearn,
            spamThreshold => $bayesAutolearnSpamThreshold,
            hamThreshold => $bayesAutolearnHamThreshold,
&>

#   Set headers which may provide inappropriate cues to the Bayesian
#   classifier
#
bayes_ignore_header X-Bogosity
bayes_ignore_header X-Spam-Flag
bayes_ignore_header X-Spam-Status
bayes_ignore_header X-DSPAM-Result
bayes_ignore_header X-DSPAM-Processed
bayes_ignore_header X-DSPAM-Confidence
bayes_ignore_header X-DSPAM-Probability
bayes_ignore_header X-DSPAM-Signature

#   Some shortcircuiting, if the plugin is enabled
#
ifplugin Mail::SpamAssassin::Plugin::Shortcircuit
#
#   default: strongly-whitelisted mails are *really* whitelisted now, if the
#   shortcircuiting plugin is active, causing early exit to save CPU load.
#   Uncomment to turn this on
#
# shortcircuit USER_IN_WHITELIST       on
# shortcircuit USER_IN_DEF_WHITELIST   on
# shortcircuit USER_IN_ALL_SPAM_TO     on
# shortcircuit SUBJECT_IN_WHITELIST    on

#   the opposite; blacklisted mails can also save CPU
#
# shortcircuit USER_IN_BLACKLIST       on
# shortcircuit USER_IN_BLACKLIST_TO    on
# shortcircuit SUBJECT_IN_BLACKLIST    on

#   if you have taken the time to correctly specify your "trusted_networks",
#   this is another good way to save CPU
#
# shortcircuit ALL_TRUSTED             on

#   and a well-trained bayes DB can save running rules, too
#
# shortcircuit BAYES_99                spam
# shortcircuit BAYES_00                ham

endif # Mail::SpamAssassin::Plugin::Shortcircuit

# ACLs

% foreach my $addr (@whitelist) {
whitelist_from <% $addr %>
% }


% foreach my $addr (@blacklist) {
blacklist_from <% $addr %>
% }

ok_locales <% "@okLocales" %>

full DKIM_VALID     eval:check_dkim_valid()
full DKIM_VALID_AU  eval:check_dkim_valid_author_sig()

<%def .autolearn>
<%args>
$active
$spamThreshold
$hamThreshold
</%args>
<& .bool, 'bayes_auto_learn', $active &>
% if  ($active) {
bayes_auto_learn_threshold_spam      <% $spamThreshold %>
bayes_auto_learn_threshold_nonspam   <% $hamThreshold  %>
% }

</%def>

score DNS_FROM_AHBL_RHSBL 0

<%def .bool>
<%init>
my ($name, $value) = @_;
</%init>
<% $name %> <% $value ? '1' : '0' %>
</%def>
