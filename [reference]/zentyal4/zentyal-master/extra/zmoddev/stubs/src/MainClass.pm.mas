<%args>
    $class
    $name
    $printableName
    $domain
    $modelDomain
    $menuSeparator
    $firewallHelper
</%args>
# Copyright (C)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Class: <% $class %>
#
#   TODO: Documentation

package <% $class %>;

use base qw(EBox::Module::Service EBox::Model::ModelProvider
% if ($firewallHelper) {
            EBox::FirewallObserver
% }
            EBox::Model::CompositeProvider);

use strict;
use warnings;

use EBox::Global;
use EBox::Gettext;
use EBox::Sudo;

use EBox::Validate qw( :all );
use EBox::Exceptions::InvalidData;
use EBox::Exceptions::MissingArgument;
use EBox::Exceptions::DataExists;
use EBox::Exceptions::DataMissing;
use EBox::Exceptions::DataNotFound;

% if ($firewallHelper) {
use <% $class %>::FirewallHelper;
% }

# Method: _create
#
# Overrides:
#
#       <Ebox::Module::_create>
#
sub _create
{
    my $class = shift;
    my $self = $class->SUPER::_create(name => '<% $name %>',
            printableName => __('<% $printableName %>'),
            domain => '<% $domain %>',
            @_);
    bless ($self, $class);
    return $self;
}

# Method: modelClasses
#
# Overrides:
#
#       <EBox::Model::ModelProvider::modelClasses>
#
sub modelClasses
{
    my ($self) = @_;

    return ['<% $class %>::Model::Settings'];
}

# Method: compositeClasses
#
# Overrides:
#
#       <EBox::Model::ModelProvider::compositeClasses>
#
sub compositeClasses
{
    my ($self) = @_;

    return [];
}

# Method: actions
#
# Overrides:
#
#       <EBox::Module::Service::actions>
#
sub actions
{
    return [
#        {
#            'action' => __('Add <% $printableName %> LDAP schema'),
#            'reason' => __('Zentyal will need this schema to store <% $printableName %> users.'),
#            'module' => '<% $domain %>'
#        },
    ];
}

# Method: enableActions
#
# Overrides:
#
#       <EBox::Module::Service::enableActions>
#
sub enableActions
{
    my ($self) = @_;

    # Execute enable-module script
    $self->SUPER::enableActions();
}

# Method: usedFiles
#
# Overrides:
#
#       <EBox::Module::Service::usedFiles>
#
sub usedFiles
{
    return [
#        {
#            'file' => CONFFILE,
#            'module' => '<% $domain %>',
#            'reason' => __('To properly configure <% $printableName %>.')
#        },
    ];
}

# Method: menu
#
# Overrides:
#
#       <EBox::Module::menu>
#
sub menu
{
    my ($self, $root) = @_;

    my $item = new EBox::Menu::Item(
    'url' => '<% $modelDomain %>/View/Settings',
    'text' => __('<% $printableName %>'),
%   if ($menuSeparator) {
      'separator' => '<% $menuSeparator %>',
%   }
    'order' => 3);

    $root->add($item);
}

# Method: _daemons
#
# Overrides:
#
#       <EBox::Module::Service::_daemons>
#
sub _daemons
{
    my $daemons = [
#        {
#            'name' => 'service',
#            'type' => 'init.d',
#            'pidfiles' => ['/var/run/service.pid']
#        },
    ];

    return $daemons;
}

# Method: _setConf
#
#       Overrides base method. It writes the Zarafa service configuration
#
sub _setConf
{
    my ($self) = @_;

#    my @params = ();
#
#    $self->writeConfFile(CONFFILE,
#                 "<% $domain %>/service.conf.mas",
#                 \@params, { 'uid' => '0', 'gid' => '0', mode => '644' });
}

% if ($firewallHelper) {
# Method: firewallHelper
#
#       All modules using any of the functions in FirewallHelper.pm
#       should override this method to return the implementation
#       of that interface.
#
# Returns:
#
#       An object implementing EBox::FirewallHelper
#
sub firewallHelper
{
    my ($self) = @_;

    my $fw = new <% $class %>::FirewallHelper();

    return $fw;
}
% }

1;
